package main

//
// an grep application "plugin" for MapReduce.
//
// go build -buildmode=plugin grep.go
//

import (
	"fmt"
	"strings"
)
import "6.5840/mr"

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mr.KeyValue.
func Map(document string, value string) (res []mr.KeyValue) {

	lines := strings.Split(value, "\n")

	for i, line := range lines {
		if strings.Contains(line, "cat") {
			kv := mr.KeyValue{fmt.Sprintf("%s:%d", document, i), line}
			res = append(res, kv)
		}
	}

	return
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func Reduce(key string, values []string) string {
	//sort.Strings(values)
	//return fmt.Sprintf("%d %s", len(values), strings.Join(values, ","))
	return values[0]
}
